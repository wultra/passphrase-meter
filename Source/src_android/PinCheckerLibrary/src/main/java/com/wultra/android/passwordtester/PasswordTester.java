/*
 * Copyright 2018 Wultra s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.wultra.android.passwordtester;

import android.content.res.AssetManager;
import android.support.annotation.NonNull;

import com.wultra.android.passwordtester.exceptions.WrongPasswordException;
import com.wultra.android.passwordtester.exceptions.WrongPinException;

import java.util.EnumSet;

/**
 * Class that provides methods for testing strength of passwords and PINs. You cannot instantiate
 * this class, but you can use {@link #getInstance()} method to obtain its unique instance. We know
 * that the singleton patter is sometimes considered as an anti-pattern, but the underlying C "Zxcvbn"
 * implementation unfortunately allows only one instance of the dictionary used at the time.
 */
public class PasswordTester {

    static {
        System.loadLibrary("WultraPasswordTester");
    }

    // Singleton

    private static class SingletonHelper {
        private static final PasswordTester instance = new PasswordTester();
    }

    /**
     * @return Unique instance of {@link PasswordTester}
     */
    public @NonNull PasswordTester getInstance() {
        return SingletonHelper.instance;
    }

    /**
     * Private constructor.
     */
    private PasswordTester() {}


    // Dictionary management

    /**
     * Loads dictionary file from asset manager. The previously loaded dictionary is automatically
     * released. The dictionary asset file must contain a precompiled file, generated by the
     * dictionary generator (see our library documentation for details).
     *
     * @param manager {@link AssetManager} containing dictionary
     * @param dictionaryAsset name of dictionary asset
     * @return {@code true} if dictionary was loaded successfully.
     */
    public native boolean loadDictionary(@NonNull AssetManager manager, @NonNull String dictionaryAsset);

    /**
     * Releases resources previously allocated in {@link #loadDictionary(AssetManager, String)} method.
     * If there is no dictionary loaded, then does nothing.
     */
    public native void freeLoadedDictionary();

    /**
     * @return {@code true} if there's loaded dictionary.
     */
    public native boolean hasLoadedDictionary();

    /**
     * Tests the strength of the password. Before you test the passwords, you should load a right
     * dictionary by calling {@link #loadDictionary(AssetManager, String)} method.
     *
     * @param password Password to test
     * @return Strength of the password
     * @throws WrongPasswordException if provided password is {@code null} or cannot be converted
     *         to C-string.
     */
    public PasswordStrength testPassword(@NonNull String password) throws WrongPasswordException {
        switch (testPasswordJNI(password)) {
            case PassResultCode.VERY_WEAK:
                return PasswordStrength.VERY_WEAK;
            case PassResultCode.WEAK:
                return PasswordStrength.WEAK;
            case PassResultCode.MODERATE:
                return PasswordStrength.MODERATE;
            case PassResultCode.GOOD:
                return PasswordStrength.GOOD;
            case PassResultCode.STRONG:
                return PasswordStrength.STRONG;
            case PassResultCode.WRONG_INPUT:
                throw new WrongPasswordException();
            default:
                throw new WrongPasswordException("Unknown result returned.");
        }
    }

    /**
     * Scans PIN for possible issues.
     *
     * @param pin PIN to scan.
     * @return Set of issues.
     * @throws WrongPinException if provided PIN contains some invalid characters, or is too long.
     */
    public EnumSet<PinTestResult> testPin(@NonNull String pin) throws WrongPinException {

        final int result = testPinJNI(pin);

        if ((result & PinResultCode.WRONG_INPUT_PIN) != 0) {
            throw new WrongPinException();
        }

        final EnumSet<PinTestResult> set = EnumSet.noneOf(PinTestResult.class);

        if ((result & PinResultCode.OK) != 0) {
            set.add(PinTestResult.OK);
        } else {
            if ((result & PinResultCode.NOT_UNIQUE) != 0) {
                set.add(PinTestResult.NOT_UNIQUE);
            }
            if ((result & PinResultCode.REPEATING_CHARACTERS) != 0) {
                set.add(PinTestResult.REPEATING_CHARACTERS);
            }
            if ((result & PinResultCode.HAS_PATTERN) != 0) {
                set.add(PinTestResult.HAS_PATTERN);
            }
            if ((result & PinResultCode.POSSIBLY_DATE) != 0) {
                set.add(PinTestResult.POSSIBLY_DATE);
            }
            if ((result & PinResultCode.FREQUENTLY_USED) != 0) {
                set.add(PinTestResult.FREQUENTLY_USED);
            }
        }

        return set;
    }

    // Private methods & constants

    /**
     * Constants returned from {@link #testPasswordJNI(String)} method.
     */
    private static class PassResultCode {
        static final int VERY_WEAK      = 0;
        static final int WEAK           = 1;
        static final int MODERATE       = 2;
        static final int GOOD           = 3;
        static final int STRONG         = 4;
        static final int WRONG_INPUT    = 5;
    }

    /**
     * Tests the strength of the password.
     *
     * @param password Password to test
     * @return Integer comparable to constants from {@link PassResultCode} private class.
     */
    private native int testPasswordJNI(@NonNull String password);


    /**
     * Constants returned from {@link #testPinJNI(String)} method.
     */
    private static class PinResultCode {
        static final int OK                     = 1;
        static final int NOT_UNIQUE             = 1 << 1;
        static final int REPEATING_CHARACTERS   = 1 << 2;
        static final int HAS_PATTERN            = 1 << 3;
        static final int POSSIBLY_DATE          = 1 << 4;
        static final int FREQUENTLY_USED        = 1 << 5;
        static final int WRONG_INPUT_PIN        = 1 << 6;
    }

    /**
     * Tests the PIN properties.
     *
     * @param pin String with PIN
     * @return Integer with combination of factors from {@link PinResultCode} private class.
     */
    private native int testPinJNI(@NonNull String pin);
}