/*
 * Copyright 2018 Wultra s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'


if (project.android.productFlavors.isEmpty()) {
    addArtifactReleasing(project.ARTIFACT_ID, "")
} else {
    // TODO fixme, doesn't work yet, installs only one flavor
    project.android.productFlavors.each { productFlavor ->
        def flavorName = productFlavor.name
        def artifactName = "${project.ARTIFACT_ID_PREFIX}${flavorName}"
        addArtifactReleasing(artifactName, flavorName)
    }
}

def addArtifactReleasing(artifactName, flavorName) {
    def flavorNameCapitalized = flavorName.capitalize()
    ext {
        bintrayRepo = "WultraPassphraseMeter" // TODO create, not ready yet
        bintrayName = project.GROUP_ID
        libraryName = artifactName

        publishedGroupId = project.GROUP_ID
        artifact = artifactName
        libraryVersion = project.VERSION_NAME

        libraryDescription = "Android library implementing checking passphase complexity"
        siteUrl = "https://github.com/wultra/passphrase-meter"
        gitUrl = "https://github.com/wultra/passphrase-meter.git"
        developerId = "wultra"
        developerName = "Wultra s.r.o."
        developerEmail = "support@wultra.com"
        licenseName = "Apache License Software License, Version 2.0"
        licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        allLicenses = ["Apache-2.0"]
    }

    group = publishedGroupId
    version = libraryVersion

    install {
        repositories.mavenInstaller {
            // This generates POM.xml with proper parameters
            pom {
                project {
                    packaging 'aar'
                    groupId publishedGroupId
                    artifactId artifact

                    // Add your description here
                    name libraryName
                    description libraryDescription
                    url siteUrl

                    // Set your license
                    licenses {
                        license {
                            name licenseName
                            url licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id developerId
                            name developerName
                            email developerEmail
                        }
                    }
                    scm {
                        connection gitUrl
                        developerConnection gitUrl
                        url siteUrl

                    }
                }
            }
        }
    }

    def androidJavadocs = task("androidJavadocs${flavorNameCapitalized}", type: Javadoc) {
        enabled = false // we have to disable because there are no java sources, only kotlin
        excludes = ['**/*.kt']
        // exclude kotlin, Javadoc task can't handle that, handle by dokka instead
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        // adds libraries to classpath
        android.libraryVariants.all { variant ->
            if (variant.name == 'release') {
                owner.classpath += variant.getJavaCompiler().classpath
            }
        }
        options.addStringOption('encoding', 'UTF-8')
    }

    def androidJavadocsJar = task("androidJavadocsJar${flavorNameCapitalized}", type: Jar, dependsOn: [androidJavadocs]) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    def androidSourcesJar = task("androidSourcesJar${flavorNameCapitalized}", type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }

    // Bintray
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        bintray {
            user = properties.getProperty("bintray.user")
            key = properties.getProperty("bintray.apiKey")

            configurations = ['archives']
            pkg {
                repo = bintrayRepo
                name = bintrayName
                userOrg = properties.getProperty("bintray.userOrg")
                desc = libraryDescription
                websiteUrl = siteUrl
                vcsUrl = gitUrl
                licenses = allLicenses
                dryRun = true
                publish = true
                publicDownloadNumbers = false
                override = false
                version {
                    desc = libraryDescription
                    gpg {
                        sign = false
                        //Determines whether to GPG sign the files. The default is false
                        passphrase = properties.getProperty("bintray.gpg.password")
                        //Optional. The passphrase for GPG signing'
                    }
                }
            }
        }
    } catch (FileNotFoundException e) {
        project.logger.error("Failed to load local.properties, Bintray task not configured")
    }
}